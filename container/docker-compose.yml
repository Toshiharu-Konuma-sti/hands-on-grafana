x-healthcheck-minio: &minioHealthcheck
  # Check if the 9000 port is open.
  test: ["CMD-SHELL", "echo > /dev/tcp/127.0.0.1/9000; if [ $$? -eq 0 ]; then echo 'Healthcheck Successful';exit 0;else echo 'Healthcheck Failed';exit 1;fi;"]
  interval: 3s
  timeout: 10s
  retries: 60

version: '3.8'

services:

##############################
# Grafana LGTM Stack
##############################

  grafana:
    container_name: grafana
    hostname: grafana
    image: grafana/grafana:12.0.2
    volumes:
      - ./grafana/provisioning/datasources/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/provisioning/alerting:/etc/grafana/provisioning/alerting:ro
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
#      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
      - GF_USERS_DEFAULT_THEME=light
      - GF_SMTP_ENABLED=true
      - GF_SMTP_HOST=maildev:1025
    ports:
      - 3000:3000
    networks:
      - internal
      - external

#-----------------------------
# Grafana Mimir
#-----------------------------

  prometheus-mimir:
    hostname: prometheus-mimir
    container_name: prometheus-mimir
    image: prom/prometheus:v3.4.2
    command:
      - --web.enable-remote-write-receiver
#      - --web.enable-otlp-receiver
      - --enable-feature=exemplar-storage
      - --log.level=debug
    volumes:
      - ./prometheus/config/prometheus-mimir.yml:/prometheus/prometheus.yml
    depends_on:
      - mimir-lb
    ports:
      - 9090:9090
    networks:
      - internal
      - external

  mimir-lb:
    hostname: mimir-lb
    container_name: mimir-lb
    image: &nginxImage nginx:1.29.0
    volumes:
      - ./nginx/config/nginx-mimir.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - mimir-1
      - mimir-2
    ports:
      - 9009:9009
    networks:
      - internal
      - external

  mimir-1:
    hostname: mimir-1
    container_name: mimir-1
    image: &mimirImage grafana/mimir:2.16.1
    command: ["-config.file=/etc/mimir.yaml"]
    depends_on:
      minio-mimir:
        condition: service_healthy
    volumes:
      - ./mimir/config/mimir.yaml:/etc/mimir.yaml
      - mimir-data-1:/data
    networks:
      - internal

  mimir-2:
    hostname: mimir-2
    container_name: mimir-2
    image: *mimirImage
    command: ["-config.file=/etc/mimir.yaml"]
    depends_on:
      minio-mimir:
        condition: service_healthy
    volumes:
      - ./mimir/config/mimir.yaml:/etc/mimir.yaml
      - mimir-data-2:/data
    networks:
      - internal

  minio-mimir:
    hostname: minio-mimir
    container_name: minio-mimir
    image: &minioImage minio/minio:RELEASE.2025-06-13T11-33-47Z
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/mimir && minio server --console-address :9001 /data"]
    environment:
      MINIO_ROOT_USER: mimir
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio-mimir:/data
    healthcheck: *minioHealthcheck
    ports:
      - 9001:9001
    networks:
      - internal
      - external

#-----------------------------
# Grafana Loki
#-----------------------------

  loki-lb:
    hostname: loki-lb
    container_name: loki-lb
    image: *nginxImage
    volumes:
      - ./nginx/config/nginx-loki.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - loki-1
      - loki-2
    networks:
      - internal

  loki-1:
    hostname: loki-1
    container_name: loki-1
    image: &lokiImage grafana/loki:3.5.1
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config/loki.yaml:/etc/loki/local-config.yaml
    depends_on:
      minio-loki:
        condition: service_healthy
    networks:
      - internal

  loki-2:
    hostname: loki-2
    container_name: loki-2
    image: *lokiImage
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - ./loki/config/loki.yaml:/etc/loki/local-config.yaml
    depends_on:
      minio-loki:
        condition: service_healthy
    networks:
      - internal

  minio-loki-createbuckets:
    hostname: minio-loki-createbuckets
    container_name: minio-loki-createbuckets
    image: &miniomcImage minio/mc:RELEASE.2025-05-21T01-59-54Z
    depends_on:
      - minio-loki
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio-loki:9000 loki ${MINIO_PASS};
      /usr/bin/mc rm -r --force myminio/loki;
      /usr/bin/mc mb myminio/loki;
      /usr/bin/mc policy set public myminio/loki;
      exit 0;
      "
    networks:
      - internal

  minio-loki:
    hostname: minio-loki
    container_name: minio-loki
    image: *minioImage
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/loki && minio server --console-address :9002 /data"]
    environment:
      MINIO_ROOT_USER: loki
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio-loki:/data
    healthcheck: *minioHealthcheck
    ports:
      - 9002:9002
    networks:
      - internal
      - external

#-----------------------------
# Grafana Tempo
#-----------------------------

  tempo-lb-otlp:
    hostname: tempo-lb-otlp
    container_name: tempo-lb-otlp
    image: *nginxImage
    volumes:
      - ./nginx/config/nginx-tempo-otlp.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - tempo-1
    networks:
      - internal

  tempo-lb-view:
    hostname: tempo-lb-view
    container_name: tempo-lb-view
    image: *nginxImage
    volumes:
      - ./nginx/config/nginx-tempo-view.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - tempo-1
    networks:
      - internal

  tempo-init:
    container_name: tempo-init
    hostname: tempo-init
    image: &tempoImage grafana/tempo:2.8.1
    user: root
    entrypoint:
      - "chown"
      - "10001:10001"
      - "/var/tempo"
    volumes:
      - tempo-data-1:/var/tempo
    networks:
      - internal

  tempo-1:
    container_name: tempo-1
    hostname: tempo-1
    image: *tempoImage
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./tempo/config/tempo.yaml:/etc/tempo.yaml
      - tempo-data-1:/var/tempo
    depends_on:
      tempo-init:
        condition: service_started
      minio-tempo:
        condition: service_healthy
    networks:
      - internal

  minio-tempo-createbuckets:
    hostname: minio-tempo-createbuckets
    container_name: minio-tempo-createbuckets
    image: *miniomcImage
    depends_on:
      - minio-tempo
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add myminio http://minio-tempo:9000 tempo ${MINIO_PASS};
      /usr/bin/mc rm -r --force myminio/tempo;
      /usr/bin/mc mb myminio/tempo;
      /usr/bin/mc policy set public myminio/tempo;
      exit 0;
      "
    networks:
      - internal

  minio-tempo:
    hostname: minio-tempo
    container_name: minio-tempo
    image: *minioImage
    entrypoint: [""]
    command: ["sh", "-c", "mkdir -p /data/tempo && minio server --console-address :9003 /data"]
    environment:
      MINIO_ROOT_USER: tempo
      MINIO_ROOT_PASSWORD: ${MINIO_PASS}
    volumes:
      - minio-tempo:/data
    healthcheck: *minioHealthcheck
    ports:
      - 9003:9003
    networks:
      - internal
      - external

#-----------------------------
# Grafana Pyroscope
#-----------------------------

  pyroscope-lb:
    hostname: pyroscope-lb
    container_name: pyroscope-lb
    image: *nginxImage
    volumes:
      - ./nginx/config/nginx-pyroscope.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - pyroscope-1
    networks:
      - internal

  pyroscope-1:
    container_name: pyroscope-1
    hostname: pyroscope-1
    image: grafana/pyroscope:1.14.0
    ports:
      - 4040:4040
    networks:
      - internal
      - external

##############################
# obsewrvability: distributed tracing
##############################

  jaeger:
    container_name: jaeger
    hostname: jaeger
    image: jaegertracing/all-in-one:1.71.0
    ports:
      - 16686:16686
    networks:
      - internal
      - external
    environment:
      COLLECTOR_OTLP_ENABLED: "true"

  zipkin:
    container_name: zipkin
    hostname: zipkin
    image: openzipkin/zipkin:3.5.1
    restart: always
    ports:
      - 9411:9411
    networks:
      - internal
      - external

##############################
# container that relays a data
##############################

  otel-collector:
    container_name: otel-collector
    hostname: otel-collector
    image: otel/opentelemetry-collector-contrib:0.129.1
    restart: always
    command: ["--config=/etc/otel-collector-config.yaml", ""]
    volumes:
      - ./otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
    networks:
      - internal

  alloy:
    container_name: alloy
    hostname: alloy
    image: grafana/alloy:v1.9.2
    command:
      - run
      - --server.http.listen-addr=0.0.0.0:12345
      - --storage.path=/var/lib/alloy/data
      - --stability.level=public-preview
      - /etc/alloy/config.alloy
    volumes:
      - ./alloy/config/config.alloy:/etc/alloy/config.alloy
    ports:
      - 12345:12345
      - 12347:12347
    networks:
      - internal
      - external

##############################
# smtp mock server
##############################

  maildev:
    container_name: maildev
    hostname: maildev
    image: maildev/maildev:2.2.1
    ports:
      - "1080:1080"
    networks:
      - internal
      - external

##############################
# volumes
##############################

volumes:
  mimir-data-1:
  mimir-data-2:
  tempo-data-1:
  minio-mimir:
  minio-loki:
  minio-tempo:

##############################
# networks
##############################

networks:
  internal:
    name: intra-net
    driver: bridge
    internal: true
  external:
    name: hands-net
    driver: bridge

